// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/hashit/hashit.proto

package go_micro_srv_hashit

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Hashit service

type HashitService interface {
	Encode(ctx context.Context, in *EncodeRequest, opts ...client.CallOption) (*EncodeResponse, error)
	Compare(ctx context.Context, in *CompareRequest, opts ...client.CallOption) (*CompareResponse, error)
}

type hashitService struct {
	c    client.Client
	name string
}

func NewHashitService(name string, c client.Client) HashitService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.hashit"
	}
	return &hashitService{
		c:    c,
		name: name,
	}
}

func (c *hashitService) Encode(ctx context.Context, in *EncodeRequest, opts ...client.CallOption) (*EncodeResponse, error) {
	req := c.c.NewRequest(c.name, "Hashit.Encode", in)
	out := new(EncodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashitService) Compare(ctx context.Context, in *CompareRequest, opts ...client.CallOption) (*CompareResponse, error) {
	req := c.c.NewRequest(c.name, "Hashit.Compare", in)
	out := new(CompareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hashit service

type HashitHandler interface {
	Encode(context.Context, *EncodeRequest, *EncodeResponse) error
	Compare(context.Context, *CompareRequest, *CompareResponse) error
}

func RegisterHashitHandler(s server.Server, hdlr HashitHandler, opts ...server.HandlerOption) error {
	type hashit interface {
		Encode(ctx context.Context, in *EncodeRequest, out *EncodeResponse) error
		Compare(ctx context.Context, in *CompareRequest, out *CompareResponse) error
	}
	type Hashit struct {
		hashit
	}
	h := &hashitHandler{hdlr}
	return s.Handle(s.NewHandler(&Hashit{h}, opts...))
}

type hashitHandler struct {
	HashitHandler
}

func (h *hashitHandler) Encode(ctx context.Context, in *EncodeRequest, out *EncodeResponse) error {
	return h.HashitHandler.Encode(ctx, in, out)
}

func (h *hashitHandler) Compare(ctx context.Context, in *CompareRequest, out *CompareResponse) error {
	return h.HashitHandler.Compare(ctx, in, out)
}
